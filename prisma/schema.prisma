// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  hashedPassword String?
  role           ROLE      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  emailVerified  DateTime?
  image          String?
  cart           Cart?
  accounts       Account[]
  sessions       Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  products ProductsOnCarts[]
  user     User?             @relation(fields: [userId], references: [id])
  userId   String?           @unique @db.ObjectId
}

model Product {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Int
  stock       Int
  description String
  image       String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  carts       ProductsOnCarts[]
  categoryIDs String[]          @db.ObjectId
  categories  Category[]        @relation(fields: [categoryIDs], references: [id])
  brand       Brand             @relation(fields: [brandName], references: [name])
  brandName   String

  @@unique([name, brandName])
}

model Brand {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  name    String    @unique
  product Product[]
}

model ProductsOnCarts {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int

  @@unique([cartId, productId])
}

model Category {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  productIDs String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIDs], references: [id])
}

enum ROLE {
  ADMIN
  USER
}
